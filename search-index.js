var N = null;var searchIndex = {};
searchIndex["tower_grpc"]={"doc":"","items":[[3,"BoxBody","tower_grpc","Dynamic `Send` body object.",N,N],[3,"Status","","",N,N],[3,"Request","","",N,N],[3,"Response","","",N,N],[3,"Encode","","A protobuf encoded gRPC response body",N,N],[4,"Error","","",N,N],[13,"Grpc","","",0,N],[13,"Inner","","",0,N],[4,"Code","","",N,N],[13,"Ok","","",1,N],[13,"Cancelled","","",1,N],[13,"Unknown","","",1,N],[13,"InvalidArgument","","",1,N],[13,"DeadlineExceeded","","",1,N],[13,"NotFound","","",1,N],[13,"AlreadyExists","","",1,N],[13,"PermissionDenied","","",1,N],[13,"ResourceExhausted","","",1,N],[13,"FailedPrecondition","","",1,N],[13,"Aborted","","",1,N],[13,"OutOfRange","","",1,N],[13,"Unimplemented","","",1,N],[13,"Internal","","",1,N],[13,"Unavailable","","",1,N],[13,"DataLoss","","",1,N],[13,"Unauthenticated","","",1,N],[0,"client","","",N,N],[3,"Grpc","tower_grpc::client","",N,N],[0,"unary","","",N,N],[3,"ResponseFuture","tower_grpc::client::unary","",N,N],[6,"Once","","",N,N],[0,"client_streaming","tower_grpc::client","",N,N],[3,"ResponseFuture","tower_grpc::client::client_streaming","",N,N],[0,"server_streaming","tower_grpc::client","",N,N],[3,"ResponseFuture","tower_grpc::client::server_streaming","",N,N],[0,"streaming","tower_grpc::client","",N,N],[3,"ResponseFuture","tower_grpc::client::streaming","",N,N],[8,"Encodable","tower_grpc::client","Convert a stream of protobuf messages to an HTTP body payload.",N,N],[10,"into_encode","","",2,[[["self"]],["t"]]],[11,"new","","Create a new `Grpc` instance backed by the given HTTP service.",3,[[["t"]],["self"]]],[11,"poll_ready","","",3,[[["self"]],["poll",["error"]]]],[11,"unary","","",3,[[["self"],["request"],["pathandquery"]],["responsefuture"]]],[11,"client_streaming","","",3,[[["self"],["request"],["pathandquery"]],["responsefuture"]]],[11,"server_streaming","","",3,[[["self"],["request"],["pathandquery"]],["responsefuture"]]],[11,"streaming","","Initiate a full streaming gRPC request",3,[[["self"],["request"],["pathandquery"]],["responsefuture"]]],[0,"generic","tower_grpc","gRPC generic over encoder / decoder.",N,N],[3,"Streaming","tower_grpc::generic","An stream of inbound gRPC messages",N,N],[3,"Encode","","Encodes gRPC message types",N,N],[3,"EncodeBuf","","A buffer to encode a message into.",N,N],[3,"DecodeBuf","","A buffer to decode messages from.",N,N],[4,"Direction","","Whether this is reading a request or a response stream value.",N,N],[13,"Request","","For requests, we expect only headers and the streaming body.",4,N],[13,"Response","","For responses, the received HTTP status code must be provided. We also expect to receive trailers after the streaming body.",4,N],[13,"EmptyResponse","","For streaming responses with zero response payloads, the HTTP status is provided immediately. In this case no additional trailers are expected.",4,N],[0,"server","","",N,N],[3,"Grpc","tower_grpc::generic::server","",N,N],[11,"new","","",5,[[["t"]],["self"]]],[11,"unary","","",5,[[["self"],["s"],["request"]],["responsefuture",["streaming"]]]],[11,"client_streaming","","",5,[[["self"],["s"],["request"]],["responsefuture"]]],[11,"server_streaming","","",5,[[["self"],["s"],["request"]],["responsefuture",["streaming"]]]],[11,"streaming","","",5,[[["self"],["s"],["request"]],["responsefuture"]]],[0,"client_streaming","","",N,N],[3,"ResponseFuture","tower_grpc::generic::server::client_streaming","",N,N],[11,"new","","",6,[[["t"],["e"]],["self"]]],[0,"server_streaming","tower_grpc::generic::server","",N,N],[3,"ResponseFuture","tower_grpc::generic::server::server_streaming","A server streaming response future",N,N],[11,"new","","",7,[[["t"],["request"],["e"]],["self"]]],[0,"streaming","tower_grpc::generic::server","",N,N],[3,"ResponseFuture","tower_grpc::generic::server::streaming","",N,N],[11,"new","","",8,[[["t"],["e"]],["self"]]],[0,"unary","tower_grpc::generic::server","",N,N],[3,"ResponseFuture","tower_grpc::generic::server::unary","",N,N],[3,"Once","","",N,N],[11,"new","","",9,[[["t"],["request"],["e"]],["self"]]],[8,"StreamingService","tower_grpc::generic::server","A specialization of tower_service::Service.",N,N],[16,"Response","","Protobuf response message type",10,N],[16,"ResponseStream","","Stream of outbound response messages",10,N],[16,"Future","","Response future",10,N],[10,"call","","Call the service",10,N],[8,"UnaryService","","A specialization of tower_service::Service.",N,N],[16,"Response","","Protobuf response message type",11,N],[16,"Future","","Response future",11,N],[10,"call","","Call the service",11,N],[8,"ClientStreamingService","","A specialization of tower_service::Service.",N,N],[16,"Response","","Protobuf response message type",12,N],[16,"Future","","Response future",12,N],[10,"call","","Call the service",12,N],[8,"ServerStreamingService","","A specialization of tower_service::Service.",N,N],[16,"Response","","Protobuf response message type",13,N],[16,"ResponseStream","","Stream of outbound response messages",13,N],[16,"Future","","Response future",13,N],[10,"call","","Call the service",13,N],[11,"reserve","tower_grpc::generic","",14,[[["self"],["usize"]]]],[8,"Codec","","Encodes and decodes gRPC message types",N,N],[16,"Encode","","The encode type",15,N],[16,"Encoder","","Encoder type",15,N],[16,"Decode","","The decode type",15,N],[16,"Decoder","","Decoder type",15,N],[10,"encoder","","Returns a new encoder",15,N],[10,"decoder","","Returns a new decoder",15,N],[8,"Encoder","","Encodes gRPC message types",N,N],[16,"Item","","Type that is encoded",16,N],[18,"CONTENT_TYPE","","The content-type header for messages using this encoding.",16,N],[10,"encode","","Encode a message into the provided buffer.",16,N],[8,"Decoder","","Decodes gRPC message types",N,N],[16,"Item","","Type that is decoded",17,N],[10,"decode","","Decode a message from the buffer.",17,[[["self"],["decodebuf"]],["result",["error"]]]],[11,"new","tower_grpc","Create a new `BoxBody` backed by `inner`.",18,[[["box",["body"]]],["self"]]],[11,"new","","Create a new gRPC request",19,[[["t"]],["self"]]],[11,"get_ref","","Get a reference to the message",19,[[["self"]],["t"]]],[11,"get_mut","","Get a mutable reference to the message",19,[[["self"]],["t"]]],[11,"metadata","","Get a reference to the custom request metadata.",19,[[["self"]],["metadatamap"]]],[11,"metadata_mut","","Get a mutable reference to the request metadata.",19,[[["self"]],["metadatamap"]]],[11,"into_inner","","Consumes `self`, returning the message",19,[[["self"]],["t"]]],[11,"from_http","","Convert an HTTP request to a gRPC request",19,[[["request"]],["self"]]],[11,"into_http","","",19,[[["self"],["uri"]],["request"]]],[11,"map","","",19,[[["self"],["f"]],["request"]]],[11,"new","","",20,[[["t"]],["self"]]],[11,"get_ref","","Get a reference to the message",20,[[["self"]],["t"]]],[11,"get_mut","","Get a mutable reference to the message",20,[[["self"]],["t"]]],[11,"into_inner","","Consumes `self`, returning the message",20,[[["self"]],["t"]]],[11,"into_http","","",20,[[["self"]],["response"]]],[11,"map","","",20,[[["self"],["f"]],["response"]]],[11,"with_code","","",21,[[["code"]],["status"]]],[11,"with_code_and_message","","",21,[[["code"],["string"]],["status"]]],[11,"from_header_map","","",21,[[["headermap"]],["option",["status"]]]],[11,"code","","",21,[[["self"]],["code"]]],[11,"error_message","","",21,[[["self"]],["str"]]],[11,"binary_error_details","","",21,[[["self"]],["bytes"]]],[11,"to_header_map","","",21,[[["self"]],["result",["headermap","error"]]]],[11,"to_header_value","","",1,[[["self"]],["headervalue"]]],[0,"metadata","","The metadata module contains data structures and utilities for handling gRPC custom metadata.",N,N],[3,"MetadataKey","tower_grpc::metadata","Represents a custom metadata field name.",N,N],[3,"MetadataValue","","Represents a custom metadata field value.",N,N],[3,"MetadataMap","","A set of gRPC custom metadata entries.",N,N],[3,"Iter","","`MetadataMap` entry iterator.",N,N],[3,"ValueDrain","","A drain iterator of all values associated with a single metadata key.",N,N],[3,"Keys","","An iterator over `MetadataMap` keys.",N,N],[3,"Values","","`MetadataMap` value iterator.",N,N],[3,"ValueIter","","An iterator of all values associated with a single metadata key.",N,N],[3,"GetAll","","A view to all values stored in a single entry.",N,N],[3,"VacantEntry","","A view into a single empty location in a `MetadataMap`.",N,N],[3,"OccupiedEntry","","A view into a single occupied location in a `MetadataMap`.",N,N],[4,"Ascii","","",N,N],[4,"Binary","","",N,N],[4,"KeyRef","","Reference to a key in a `MetadataMap`. It can point to either an ascii or a binary (\"*-bin\") key.",N,N],[13,"Ascii","","",22,N],[13,"Binary","","",22,N],[4,"KeyAndValueRef","","Reference to a key and an associated value in a `MetadataMap`. It can point to either an ascii or a binary (\"*-bin\") key.",N,N],[13,"Ascii","","",23,N],[13,"Binary","","",23,N],[4,"KeyAndMutValueRef","","Reference to a key and an associated value in a `MetadataMap`. It can point to either an ascii or a binary (\"*-bin\") key.",N,N],[13,"Ascii","","",24,N],[13,"Binary","","",24,N],[4,"ValueRef","","Reference to a value in a `MetadataMap`. It can point to either an ascii or a binary (\"*-bin\" key) value.",N,N],[13,"Ascii","","",25,N],[13,"Binary","","",25,N],[4,"ValueRefMut","","Reference to a value in a `MetadataMap`. It can point to either an ascii or a binary (\"*-bin\" key) value.",N,N],[13,"Ascii","","",26,N],[13,"Binary","","",26,N],[4,"Entry","","A view into a single location in a `MetadataMap`, which may be vacant or occupied.",N,N],[13,"Occupied","","An occupied entry",27,N],[13,"Vacant","","A vacant entry",27,N],[0,"errors","","The metadata::errors module contains types for errors that can occur while handling gRPC custom metadata.",N,N],[3,"InvalidMetadataKey","tower_grpc::metadata::errors","A possible error when converting a `MetadataKey` from another type.",N,N],[3,"InvalidMetadataValue","","A possible error when converting a `MetadataValue` from a string or byte slice.",N,N],[3,"InvalidMetadataValueBytes","","A possible error when converting a `MetadataValue` from a string or byte slice.",N,N],[3,"ToStrError","","A possible error when converting a `MetadataValue` to a string representation.",N,N],[6,"AsciiMetadataKey","tower_grpc::metadata","",N,N],[6,"BinaryMetadataKey","","",N,N],[6,"AsciiMetadataValue","","",N,N],[6,"BinaryMetadataValue","","",N,N],[0,"server","tower_grpc","",N,N],[3,"Grpc","tower_grpc::server","",N,N],[0,"client_streaming","","",N,N],[3,"ResponseFuture","tower_grpc::server::client_streaming","",N,N],[0,"server_streaming","tower_grpc::server","",N,N],[3,"ResponseFuture","tower_grpc::server::server_streaming","",N,N],[0,"streaming","tower_grpc::server","",N,N],[3,"ResponseFuture","tower_grpc::server::streaming","",N,N],[0,"unary","tower_grpc::server","",N,N],[3,"ResponseFuture","tower_grpc::server::unary","",N,N],[11,"unary","tower_grpc::server","",28,[[["t"],["request"]],["responsefuture"]]],[11,"client_streaming","","",28,[[["t"],["request"]],["responsefuture",["streaming"]]]],[11,"server_streaming","","",28,[[["t"],["request"]],["responsefuture"]]],[11,"streaming","","",28,[[["t"],["request"]],["responsefuture",["streaming"]]]],[0,"codegen","tower_grpc","Type re-exports used by generated code",N,N],[0,"server","tower_grpc::codegen","Type re-exports used by generated server code",N,N],[0,"grpc","tower_grpc::codegen::server","Re-export types from this crate",N,N],[3,"BoxBody","tower_grpc::codegen::server::grpc","Dynamic `Send` body object.",N,N],[3,"Request","","",N,N],[3,"Response","","",N,N],[3,"Status","","",N,N],[3,"Encode","","A protobuf encoded gRPC response body",N,N],[4,"Error","","",N,N],[13,"Grpc","","",0,N],[13,"Inner","","",0,N],[4,"Code","","",N,N],[13,"Ok","","",1,N],[13,"Cancelled","","",1,N],[13,"Unknown","","",1,N],[13,"InvalidArgument","","",1,N],[13,"DeadlineExceeded","","",1,N],[13,"NotFound","","",1,N],[13,"AlreadyExists","","",1,N],[13,"PermissionDenied","","",1,N],[13,"ResourceExhausted","","",1,N],[13,"FailedPrecondition","","",1,N],[13,"Aborted","","",1,N],[13,"OutOfRange","","",1,N],[13,"Unimplemented","","",1,N],[13,"Internal","","",1,N],[13,"Unavailable","","",1,N],[13,"DataLoss","","",1,N],[13,"Unauthenticated","","",1,N],[6,"Streaming","","A stream of inbound gRPC messages",N,N],[8,"Body","","A body to send and receive gRPC messages.",N,N],[16,"Data","","The body buffer type.",29,N],[11,"is_end_stream","","Returns `true` when the end of the stream has been reached.",29,[[["self"]],["bool"]]],[10,"poll_data","","Polls the stream for more data.",29,[[["self"]],["poll",["option","error"]]]],[10,"poll_metadata","","Polls the stream for the ending metadata.",29,[[["self"]],["poll",["option","error"]]]],[0,"bytes","tower_grpc::codegen::server","Re-export types from the `bytes` crate.",N,N],[3,"Bytes","tower_grpc::codegen::server::bytes","A reference counted contiguous slice of memory.",N,N],[0,"futures","tower_grpc::codegen::server","Re-export types from the `future` crate.",N,N],[8,"Future","tower_grpc::codegen::server::futures","Trait for types which are a placeholder of a value that may become available at some later point in time.",N,N],[16,"Item","","The type of value that this future will resolved with if it is successful.",30,N],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",30,N],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",30,[[["self"]],["result",["async"]]]],[11,"wait","","Block the current thread until this future is resolved.",30,[[["self"]],["result"]]],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",30,[[["self"],["f"]],["map"]]],[11,"map_err","","Map this future's error to a different error, returning a new future.",30,[[["self"],["f"]],["maperr"]]],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",30,[[["self"]],["fromerr"]]],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",30,[[["self"],["f"]],["then"]]],[11,"and_then","","Execute another future after this one has resolved successfully.",30,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Execute another future if this one resolves with an error.",30,[[["self"],["f"]],["orelse"]]],[11,"select","","Waits for either one of two futures to complete.",30,[[["self"],["b"]],["select"]]],[11,"select2","","Waits for either one of two differently-typed futures to complete.",30,[[["self"],["b"]],["select2"]]],[11,"join","","Joins the result of two futures, waiting for them both to complete.",30,[[["self"],["b"]],["join"]]],[11,"join3","","Same as `join`, but with more futures.",30,[[["self"],["b"],["c"]],["join3"]]],[11,"join4","","Same as `join`, but with more futures.",30,[[["self"],["b"],["c"],["d"]],["join4"]]],[11,"join5","","Same as `join`, but with more futures.",30,[[["self"],["b"],["c"],["d"],["e"]],["join5"]]],[11,"into_stream","","Convert this future into a single element stream.",30,[[["self"]],["intostream"]]],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",30,[[["self"]],["flatten"]]],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",30,[[["self"]],["flattenstream"]]],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",30,[[["self"]],["fuse"]]],[11,"inspect","","Do something with the item of a future, passing it on.",30,[[["self"],["f"]],["inspect"]]],[11,"catch_unwind","","Catches unwinding panics while polling the future.",30,[[["self"]],["catchunwind"]]],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",30,[[["self"]],["shared"]]],[8,"Stream","","A stream of values, not all of which may have been produced yet.",N,N],[16,"Item","","The type of item this stream will yield on success.",31,N],[16,"Error","","The type of error this stream may generate.",31,N],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if the stream is finished.",31,[[["self"]],["result",["async"]]]],[11,"wait","","Creates an iterator which blocks the current thread until each item of this stream is resolved.",31,[[["self"]],["wait"]]],[11,"into_future","","Converts this stream into a `Future`.",31,[[["self"]],["streamfuture"]]],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",31,[[["self"],["f"]],["map"]]],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",31,[[["self"],["f"]],["maperr"]]],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",31,[[["self"],["f"]],["filter"]]],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",31,[[["self"],["f"]],["filtermap"]]],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",31,[[["self"],["f"]],["then"]]],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",31,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",31,[[["self"],["f"]],["orelse"]]],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",31,[[["self"]],["collect"]]],[11,"concat2","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",31,[[["self"]],["concat2"]]],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",31,[[["self"]],["concat"]]],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",31,[[["self"],["t"],["f"]],["fold"]]],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",31,[[["self"]],["flatten"]]],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",31,[[["self"],["p"]],["skipwhile"]]],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",31,[[["self"],["p"]],["takewhile"]]],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",31,[[["self"],["f"]],["foreach"]]],[11,"from_err","","Map this stream's error to any error implementing `From` for this stream's `Error`, returning a new stream.",31,[[["self"]],["fromerr"]]],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",31,[[["self"],["u64"]],["take"]]],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",31,[[["self"],["u64"]],["skip"]]],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",31,[[["self"]],["fuse"]]],[11,"by_ref","","Borrows a stream, rather than consuming it.",31,[[["self"]],["self"]]],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",31,[[["self"]],["catchunwind"]]],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",31,[[["self"],["usize"]],["buffered"]]],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",31,[[["self"],["usize"]],["bufferunordered"]]],[11,"merge","","An adapter for merging the output of two streams.",31,[[["self"],["s"]],["merge"]]],[11,"zip","","An adapter for zipping two streams together.",31,[[["self"],["s"]],["zip"]]],[11,"chain","","Adapter for chaining two stream.",31,[[["self"],["s"]],["chain"]]],[11,"peekable","","Creates a new stream which exposes a `peek` method.",31,[[["self"]],["peekable"]]],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",31,[[["self"],["usize"]],["chunks"]]],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",31,[[["self"],["s"]],["select"]]],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",31,[[["self"],["s"]],["forward"]]],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",31,N],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",31,[[["self"],["f"]],["inspect"]]],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",31,[[["self"],["f"]],["inspecterr"]]],[6,"Poll","","Return type of the `Future::poll` method, indicates whether a future's value is ready or not.",N,N],[4,"Async","","Return type of future, indicating whether a value is ready or not.",N,N],[13,"Ready","","Represents that a value is immediately ready.",32,N],[13,"NotReady","","Represents that a value is not ready yet, but may be so later.",32,N],[3,"FutureResult","","A future representing a value that is immediately ready.",N,N],[5,"ok","","Creates a \"leaf future\" from an immediate value of a finished and successful computation.",N,[[["t"]],["futureresult"]]],[0,"http","tower_grpc::codegen::server","Re-exported types from the `http` crate.",N,N],[3,"Request","tower_grpc::codegen::server::http","Represents an HTTP request.",N,N],[3,"Response","","Represents an HTTP response",N,N],[3,"HeaderMap","","A set of HTTP headers",N,N],[0,"h2","tower_grpc::codegen::server","Re-exported types from the `h2` crate.",N,N],[3,"Error","tower_grpc::codegen::server::h2","Represents HTTP/2.0 operation errors.",N,N],[0,"tower","tower_grpc::codegen::server","Re-exported types from the `tower` crate.",N,N],[8,"Service","tower_grpc::codegen::server::tower","An asynchronous function from `Request` to a `Response`.",N,N],[16,"Response","","Responses given by the service.",33,N],[16,"Error","","Errors produced by the service.",33,N],[16,"Future","","The future response value.",33,N],[10,"poll_ready","","Returns `Ready` when the service is able to process requests.",33,[[["self"]],["result",["async"]]]],[10,"call","","Process the request and return the response asynchronously.",33,N],[8,"MakeService","","Creates new `Service` values.",N,N],[16,"Response","","Responses given by the service",34,N],[16,"Error","","Errors produced by the service",34,N],[16,"Service","","The `Service` value created by this factory",34,N],[16,"MakeError","","Errors produced while building a service.",34,N],[16,"Future","","The future of the `Service` instance.",34,N],[10,"poll_ready","","Returns `Ready` when the factory is able to process create more services.",34,[[["self"]],["result",["async"]]]],[10,"make_service","","Create and return a new service value asynchronously.",34,N],[0,"tower_h2","tower_grpc::codegen::server","Re-exported types from `tower-h2` crate.",N,N],[8,"Body","tower_grpc::codegen::server::tower_h2","A generic h2 client/server request/response body.",N,N],[16,"Data","","The body chunk type",35,N],[11,"is_end_stream","","Returns `true` when the end of stream has been reached.",35,[[["self"]],["bool"]]],[10,"poll_data","","Polls a stream of data.",35,[[["self"]],["result",["async","error"]]]],[11,"poll_trailers","","Returns possibly one `HeaderMap` for trailers.",35,[[["self"]],["result",["async","error"]]]],[3,"RecvBody","","Allows a stream to be read from the remote.",N,N],[0,"client","tower_grpc::codegen","",N,N],[0,"grpc","tower_grpc::codegen::client","Re-export types from this crate",N,N],[3,"Request","tower_grpc::codegen::client::grpc","",N,N],[3,"Response","","",N,N],[3,"Status","","",N,N],[4,"Error","","",N,N],[13,"Grpc","","",0,N],[13,"Inner","","",0,N],[4,"Code","","",N,N],[13,"Ok","","",1,N],[13,"Cancelled","","",1,N],[13,"Unknown","","",1,N],[13,"InvalidArgument","","",1,N],[13,"DeadlineExceeded","","",1,N],[13,"NotFound","","",1,N],[13,"AlreadyExists","","",1,N],[13,"PermissionDenied","","",1,N],[13,"ResourceExhausted","","",1,N],[13,"FailedPrecondition","","",1,N],[13,"Aborted","","",1,N],[13,"OutOfRange","","",1,N],[13,"Unimplemented","","",1,N],[13,"Internal","","",1,N],[13,"Unavailable","","",1,N],[13,"DataLoss","","",1,N],[13,"Unauthenticated","","",1,N],[8,"Body","","A body to send and receive gRPC messages.",N,N],[16,"Data","","The body buffer type.",29,N],[11,"is_end_stream","tower_grpc::codegen::server::grpc","Returns `true` when the end of the stream has been reached.",29,[[["self"]],["bool"]]],[10,"poll_data","tower_grpc::codegen::client::grpc","Polls the stream for more data.",29,[[["self"]],["poll",["option","error"]]]],[10,"poll_metadata","","Polls the stream for the ending metadata.",29,[[["self"]],["poll",["option","error"]]]],[0,"http","tower_grpc::codegen::client","",N,N],[3,"Uri","tower_grpc::codegen::client::http","The URI component of a request.",N,N],[3,"PathAndQuery","","Represents the path component of a URI",N,N],[0,"futures","tower_grpc::codegen::client","Re-export types from the `future` crate.",N,N],[8,"Future","tower_grpc::codegen::client::futures","Trait for types which are a placeholder of a value that may become available at some later point in time.",N,N],[16,"Item","","The type of value that this future will resolved with if it is successful.",30,N],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",30,N],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",30,[[["self"]],["result",["async"]]]],[11,"wait","","Block the current thread until this future is resolved.",30,[[["self"]],["result"]]],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",30,[[["self"],["f"]],["map"]]],[11,"map_err","","Map this future's error to a different error, returning a new future.",30,[[["self"],["f"]],["maperr"]]],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",30,[[["self"]],["fromerr"]]],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",30,[[["self"],["f"]],["then"]]],[11,"and_then","","Execute another future after this one has resolved successfully.",30,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Execute another future if this one resolves with an error.",30,[[["self"],["f"]],["orelse"]]],[11,"select","","Waits for either one of two futures to complete.",30,[[["self"],["b"]],["select"]]],[11,"select2","","Waits for either one of two differently-typed futures to complete.",30,[[["self"],["b"]],["select2"]]],[11,"join","","Joins the result of two futures, waiting for them both to complete.",30,[[["self"],["b"]],["join"]]],[11,"join3","","Same as `join`, but with more futures.",30,[[["self"],["b"],["c"]],["join3"]]],[11,"join4","","Same as `join`, but with more futures.",30,[[["self"],["b"],["c"],["d"]],["join4"]]],[11,"join5","","Same as `join`, but with more futures.",30,[[["self"],["b"],["c"],["d"],["e"]],["join5"]]],[11,"into_stream","","Convert this future into a single element stream.",30,[[["self"]],["intostream"]]],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",30,[[["self"]],["flatten"]]],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",30,[[["self"]],["flattenstream"]]],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",30,[[["self"]],["fuse"]]],[11,"inspect","","Do something with the item of a future, passing it on.",30,[[["self"],["f"]],["inspect"]]],[11,"catch_unwind","","Catches unwinding panics while polling the future.",30,[[["self"]],["catchunwind"]]],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",30,[[["self"]],["shared"]]],[6,"Poll","","Return type of the `Future::poll` method, indicates whether a future's value is ready or not.",N,N],[0,"tower","tower_grpc::codegen::client","",N,N],[8,"HttpService","tower_grpc::codegen::client::tower","An HTTP service",N,N],[16,"ResponseBody","","Response payload.",36,N],[16,"Error","","Errors produced by the service.",36,N],[16,"Future","","The future response value.",36,N],[10,"poll_ready","","Returns `Ready` when the service is able to process requests.",36,[[["self"]],["result",["async"]]]],[10,"call","","Process the request and return the response asynchronously.",36,N],[11,"lift","","Wrap the HttpService so that it implements tower_service::Service directly.",36,[[["self"]],["liftservice"]]],[11,"lift_ref","","Same as `lift` but operates on an HttpService reference.",36,[[["self"]],["liftserviceref"]]],[0,"tower_h2","tower_grpc::codegen::client","Re-exported types from `tower-h2` crate.",N,N],[8,"Body","tower_grpc::codegen::client::tower_h2","A generic h2 client/server request/response body.",N,N],[16,"Data","","The body chunk type",35,N],[11,"is_end_stream","","Returns `true` when the end of stream has been reached.",35,[[["self"]],["bool"]]],[10,"poll_data","","Polls a stream of data.",35,[[["self"]],["result",["async","error"]]]],[11,"poll_trailers","","Returns possibly one `HeaderMap` for trailers.",35,[[["self"]],["result",["async","error"]]]],[6,"Streaming","tower_grpc","A stream of inbound gRPC messages",N,N],[8,"Body","","A body to send and receive gRPC messages.",N,N],[16,"Data","","The body buffer type.",29,N],[11,"is_end_stream","tower_grpc::codegen::server::grpc","Returns `true` when the end of the stream has been reached.",29,[[["self"]],["bool"]]],[10,"poll_data","tower_grpc","Polls the stream for more data.",29,[[["self"]],["poll",["option","error"]]]],[10,"poll_metadata","","Polls the stream for the ending metadata.",29,[[["self"]],["poll",["option","error"]]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"equivalent","","",1,[[["self"],["k"]],["bool"]]],[11,"into","tower_grpc::client","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"into","tower_grpc::client::unary","",38,[[["self"]],["u"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"into_future","","",38,[[["self"]],["f"]]],[11,"into","tower_grpc::client::client_streaming","",39,[[["self"]],["u"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"into_future","","",39,[[["self"]],["f"]]],[11,"into","tower_grpc::client::server_streaming","",40,[[["self"]],["u"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"into_future","","",40,[[["self"]],["f"]]],[11,"into","tower_grpc::client::streaming","",41,[[["self"]],["u"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"into_future","","",41,[[["self"]],["f"]]],[11,"into_encode","tower_grpc::generic","",42,[[["self"]],["boxbody",["bytes"]]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"into_buf","","",44,[[["self"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"into","tower_grpc::generic::server","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"into","tower_grpc::generic::server::client_streaming","",6,[[["self"]],["u"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"into_future","","",6,[[["self"]],["f"]]],[11,"into","tower_grpc::generic::server::server_streaming","",7,[[["self"]],["u"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"into_future","","",7,[[["self"]],["f"]]],[11,"into","tower_grpc::generic::server::streaming","",8,[[["self"]],["u"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"into_future","","",8,[[["self"]],["f"]]],[11,"into","tower_grpc::generic::server::unary","",9,[[["self"]],["u"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"into_future","","",9,[[["self"]],["f"]]],[11,"into_encode","","",45,[[["self"]],["boxbody",["bytes"]]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"into","tower_grpc::metadata::errors","",46,[[["self"]],["u"]]],[11,"to_string","","",46,[[["self"]],["string"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"to_string","","",47,[[["self"]],["string"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"into","tower_grpc::metadata","",48,[[["self"]],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,N],[11,"from","","",48,[[["t"]],["t"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"equivalent","","",48,[[["self"],["k"]],["bool"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,N],[11,"from","","",49,[[["t"]],["t"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"equivalent","","",49,[[["self"],["k"]],["bool"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"to_string","","",50,[[["self"]],["string"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,N],[11,"from","","",50,[[["t"]],["t"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"equivalent","","",50,[[["self"],["k"]],["bool"]]],[11,"into","tower_grpc::metadata::errors","",51,[[["self"]],["u"]]],[11,"to_string","","",51,[[["self"]],["string"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"into","tower_grpc::metadata","",52,[[["self"]],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,N],[11,"from","","",52,[[["t"]],["t"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"equivalent","","",52,[[["self"],["k"]],["bool"]]],[11,"into","tower_grpc::metadata::errors","",53,[[["self"]],["u"]]],[11,"to_string","","",53,[[["self"]],["string"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"into","tower_grpc::metadata","",54,[[["self"]],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,N],[11,"from","","",54,[[["t"]],["t"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into_iter","","",55,[[["self"]],["i"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into_iter","","",56,[[["self"]],["i"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"into_iter","","",57,[[["self"]],["i"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"into_iter","","",58,[[["self"]],["i"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"into_iter","","",59,[[["self"]],["i"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"into_iter","","",60,[[["self"]],["i"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"into_iter","","",62,[[["self"]],["i"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"into","tower_grpc::server","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"into","tower_grpc::server::client_streaming","",63,[[["self"]],["u"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"into_future","","",63,[[["self"]],["f"]]],[11,"into","tower_grpc::server::server_streaming","",64,[[["self"]],["u"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"into_future","","",64,[[["self"]],["f"]]],[11,"into","tower_grpc::server::streaming","",65,[[["self"]],["u"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"into_future","","",65,[[["self"]],["f"]]],[11,"into","tower_grpc::server::unary","",66,[[["self"]],["u"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"into_future","","",66,[[["self"]],["f"]]],[11,"into","tower_grpc::codegen::server::bytes","",67,[[["self"]],["u"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,N],[11,"from","","",67,[[["t"]],["t"]]],[11,"into_iter","","",67,[[["self"]],["i"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"into_buf","","",67,[[["self"]],["t"]]],[11,"equivalent","","",67,[[["self"],["k"]],["bool"]]],[11,"into","tower_grpc::codegen::server::futures","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"from","","",32,[[["t"]],["t"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,N],[11,"from","","",68,[[["t"]],["t"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"into_future","","",68,[[["self"]],["f"]]],[11,"into","tower_grpc::codegen::server::http","",69,[[["self"]],["u"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,N],[11,"from","","",71,[[["t"]],["t"]]],[11,"into_iter","","",71,[[["self"]],["i"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"equivalent","","",71,[[["self"],["k"]],["bool"]]],[11,"into","tower_grpc::codegen::server::h2","",72,[[["self"]],["u"]]],[11,"to_string","","",72,[[["self"]],["string"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"into","tower_grpc::codegen::server::tower_h2","",73,[[["self"]],["u"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"into","tower_grpc::codegen::client::http","",74,[[["self"]],["u"]]],[11,"to_string","","",74,[[["self"]],["string"]]],[11,"to_owned","","",74,[[["self"]],["t"]]],[11,"clone_into","","",74,N],[11,"from","","",74,[[["t"]],["t"]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"get_type_id","","",74,[[["self"]],["typeid"]]],[11,"try_into","","",74,[[["self"]],["result"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"equivalent","","",74,[[["self"],["k"]],["bool"]]],[11,"into","","",75,[[["self"]],["u"]]],[11,"to_string","","",75,[[["self"]],["string"]]],[11,"to_owned","","",75,[[["self"]],["t"]]],[11,"clone_into","","",75,N],[11,"from","","",75,[[["t"]],["t"]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"get_type_id","","",75,[[["self"]],["typeid"]]],[11,"try_into","","",75,[[["self"]],["result"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"equivalent","","",75,[[["self"],["k"]],["bool"]]],[11,"from","tower_grpc::codegen::server::bytes","",67,[[["string"]],["bytes"]]],[11,"from","","",67,[[["str"]],["bytes"]]],[11,"from","","",67,N],[11,"from","","",67,[[["vec",["u8"]]],["bytes"]]],[11,"from","","",67,[[["bytesmut"]],["bytes"]]],[11,"eq","","",67,[[["self"],["bytesmut"]],["bool"]]],[11,"eq","","",67,[[["self"],["string"]],["bool"]]],[11,"eq","","",67,[[["self"],["bytes"]],["bool"]]],[11,"eq","","",67,[[["self"],["t"]],["bool"]]],[11,"eq","","",67,N],[11,"eq","","",67,[[["self"],["vec"]],["bool"]]],[11,"eq","","",67,[[["self"],["str"]],["bool"]]],[11,"deref","","",67,N],[11,"clone","","",67,[[["self"]],["bytes"]]],[11,"from_buf","","",67,[[["t"]],["bytes"]]],[11,"extend","","",67,N],[11,"extend","","",67,N],[11,"cmp","","",67,[[["self"],["bytes"]],["ordering"]]],[11,"borrow","","",67,N],[11,"into_buf","","",67,N],[11,"into_iter","","",67,N],[11,"hash","","",67,N],[11,"fmt","","",67,[[["self"],["formatter"]],["result",["error"]]]],[11,"as_ref","","",67,N],[11,"partial_cmp","","",67,[[["self"],["str"]],["option",["ordering"]]]],[11,"partial_cmp","","",67,[[["self"],["t"]],["option",["ordering"]]]],[11,"partial_cmp","","",67,[[["self"],["vec"]],["option",["ordering"]]]],[11,"partial_cmp","","",67,[[["self"],["string"]],["option",["ordering"]]]],[11,"partial_cmp","","",67,[[["self"],["bytes"]],["option",["ordering"]]]],[11,"partial_cmp","","",67,N],[11,"from_iter","","",67,[[["t"]],["bytes"]]],[11,"default","","",67,[[],["bytes"]]],[11,"poll","tower_grpc::codegen::server::futures","",68,[[["self"]],["result",["async"]]]],[11,"clone","","",32,[[["self"]],["async"]]],[11,"clone","","",68,[[["self"]],["futureresult"]]],[11,"eq","","",32,[[["self"],["async"]],["bool"]]],[11,"ne","","",32,[[["self"],["async"]],["bool"]]],[11,"from","","",68,[[["result"]],["futureresult"]]],[11,"from","","",32,[[["t"]],["async"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result",["error"]]]],[11,"from","tower_grpc::codegen::server::bytes","",67,[[["headername"]],["bytes"]]],[11,"from","","",67,[[["authority"]],["bytes"]]],[11,"from","","",67,[[["headervalue"]],["bytes"]]],[11,"from","","",67,[[["custom"]],["bytes"]]],[11,"from","","",67,[[["bytestr"]],["bytes"]]],[11,"from","","",67,[[["pathandquery"]],["bytes"]]],[11,"from","","",67,[[["scheme"]],["bytes"]]],[11,"from_str","tower_grpc::codegen::client::http","",75,[[["str"]],["result",["pathandquery","invaliduri"]]]],[11,"from_str","","",74,[[["str"]],["result",["uri","invaliduri"]]]],[11,"eq","","",75,[[["self"],["str"]],["bool"]]],[11,"eq","","",74,[[["self"],["str"]],["bool"]]],[11,"eq","","",75,[[["self"],["string"]],["bool"]]],[11,"eq","","",75,[[["self"],["pathandquery"]],["bool"]]],[11,"eq","","",74,[[["self"],["uri"]],["bool"]]],[11,"eq","","",74,[[["self"],["str"]],["bool"]]],[11,"eq","","",75,[[["self"],["str"]],["bool"]]],[11,"eq","tower_grpc::codegen::server::http","",71,[[["self"],["headermap"]],["bool"]]],[11,"clone","tower_grpc::codegen::client::http","",75,[[["self"]],["pathandquery"]]],[11,"clone","","",74,[[["self"]],["uri"]]],[11,"clone","tower_grpc::codegen::server::http","",71,[[["self"]],["headermap"]]],[11,"fmt","tower_grpc::codegen::client::http","",75,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result",["error"]]]],[11,"extend","tower_grpc::codegen::server::http","",71,N],[11,"extend","","Extend a `HeaderMap` with the contents of another `HeaderMap`.",71,N],[11,"into_iter","","Creates a consuming iterator, that is, one that moves keys and values out of the map in arbitrary order. The map cannot be used after calling this.",71,[[["self"]],["intoiter"]]],[11,"hash","tower_grpc::codegen::client::http","",74,N],[11,"fmt","tower_grpc::codegen::server::http","",70,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tower_grpc::codegen::client::http","",75,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","tower_grpc::codegen::server::http","",71,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result",["error"]]]],[11,"try_from","tower_grpc::codegen::client::http","",74,[[["uri"]],["result",["uri"]]]],[11,"try_from","","",75,[[["str"]],["result",["pathandquery"]]]],[11,"try_from","","",75,[[["pathandquery"]],["result",["pathandquery"]]]],[11,"try_from","","",75,[[["bytes"]],["result",["pathandquery"]]]],[11,"try_from","","",75,N],[11,"try_from","","",74,[[["str"]],["result",["uri"]]]],[11,"try_from","","",74,[[["parts"]],["result",["uri"]]]],[11,"try_from","","",74,[[["bytes"]],["result",["uri"]]]],[11,"try_from","","",74,[[["uri"]],["result",["uri"]]]],[11,"try_from","","",74,[[["string"]],["result",["uri"]]]],[11,"try_from","","",74,[[["string"]],["result",["uri"]]]],[11,"index","tower_grpc::codegen::server::http","Panics Using the index operator will cause a panic if the header you're querying isn't set.",71,[[["self"],["k"]],["t"]]],[11,"partial_cmp","tower_grpc::codegen::client::http","",75,[[["self"],["str"]],["option",["ordering"]]]],[11,"partial_cmp","","",75,[[["self"],["pathandquery"]],["option",["ordering"]]]],[11,"partial_cmp","","",75,[[["self"],["str"]],["option",["ordering"]]]],[11,"partial_cmp","","",75,[[["self"],["string"]],["option",["ordering"]]]],[11,"from_iter","tower_grpc::codegen::server::http","",71,[[["i"]],["headermap"]]],[11,"default","","",71,[[],["headermap"]]],[11,"default","tower_grpc::codegen::client::http","",74,[[],["uri"]]],[11,"default","tower_grpc::codegen::server::http","",69,[[],["request"]]],[11,"default","","",70,[[],["response"]]],[11,"from","tower_grpc::codegen::server::h2","",72,[[["senderror"]],["error"]]],[11,"from","","",72,[[["usererror"]],["error"]]],[11,"from","","",72,[[["error"]],["error"]]],[11,"from","","",72,[[["error"]],["error"]]],[11,"from","","",72,[[["reason"]],["error"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",72,[[["self"]],["str"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result",["error"]]]],[11,"from","tower_grpc::codegen::server::bytes","",67,[[["data"]],["bytes"]]],[11,"fmt","tower_grpc::codegen::server::tower_h2","",73,[[["self"],["formatter"]],["result",["error"]]]],[11,"is_end_stream","","",73,[[["self"]],["bool"]]],[11,"poll_data","","",73,[[["self"]],["result",["async","error"]]]],[11,"poll_trailers","","",73,[[["self"]],["result",["async","error"]]]],[11,"default","","",73,[[],["recvbody"]]],[11,"is_end_stream","tower_grpc::generic","",43,[[["self"]],["bool"]]],[11,"poll_data","","",43,[[["self"]],["poll",["option","error"]]]],[11,"poll_metadata","","",43,[[["self"]],["poll",["option","error"]]]],[11,"is_end_stream","tower_grpc","",18,[[["self"]],["bool"]]],[11,"poll_data","","",18,[[["self"]],["poll",["option","error"]]]],[11,"poll_metadata","","",18,[[["self"]],["poll",["option","error"]]]],[11,"is_end_stream","tower_grpc::codegen::server::tower_h2","",73,[[["self"]],["bool"]]],[11,"poll_data","","",73,[[["self"]],["poll",["option","error"]]]],[11,"poll_metadata","","",73,[[["self"]],["poll",["option","error"]]]],[11,"is_end_stream","tower_grpc","",37,[[["self"]],["bool"]]],[11,"poll_data","","",37,[[["self"]],["poll",["option","error"]]]],[11,"poll_metadata","","",37,[[["self"]],["poll",["option","error"]]]],[11,"next","tower_grpc::metadata","",55,[[["self"]],["option"]]],[11,"size_hint","","",55,N],[11,"next","","",56,[[["self"]],["option"]]],[11,"size_hint","","",56,N],[11,"next","","",57,[[["self"]],["option"]]],[11,"size_hint","","",57,N],[11,"next","","",58,[[["self"]],["option"]]],[11,"size_hint","","",58,N],[11,"next","","",59,[[["self"]],["option"]]],[11,"size_hint","","",59,N],[11,"partial_cmp","","",52,[[["self"],["metadatavalue"]],["option",["ordering"]]]],[11,"partial_cmp","","",52,[[["self"],["str"]],["option",["ordering"]]]],[11,"partial_cmp","","",52,N],[11,"partial_cmp","","",52,[[["self"],["string"]],["option",["ordering"]]]],[11,"partial_cmp","","",52,[[["self"],["t"]],["option",["ordering"]]]],[11,"default","","",54,[[],["metadatamap"]]],[11,"next_back","","",59,[[["self"]],["option"]]],[11,"cmp","","",52,[[["self"],["self"]],["ordering"]]],[11,"eq","","",48,[[["self"],["ascii"]],["bool"]]],[11,"eq","","",49,[[["self"],["binary"]],["bool"]]],[11,"eq","","",50,[[["self"],["metadatakey"]],["bool"]]],[11,"ne","","",50,[[["self"],["metadatakey"]],["bool"]]],[11,"eq","","",50,[[["self"],["metadatakey"]],["bool"]]],[11,"eq","","Performs a case-insensitive comparison of the string against the header name",50,[[["self"],["str"]],["bool"]]],[11,"eq","","Performs a case-insensitive comparison of the string against the header name",50,[[["self"],["str"]],["bool"]]],[11,"eq","","",52,[[["self"],["metadatavalue"]],["bool"]]],[11,"eq","","",52,[[["self"],["str"]],["bool"]]],[11,"eq","","",52,N],[11,"eq","","",52,[[["self"],["string"]],["bool"]]],[11,"eq","","",52,[[["self"],["t"]],["bool"]]],[11,"eq","","",60,[[["self"],["self"]],["bool"]]],[11,"eq","tower_grpc","",1,[[["self"],["code"]],["bool"]]],[11,"from","","",0,[[["t"]],["self"]]],[11,"from","tower_grpc::codegen::server::h2","",72,[[["error"]],["self"]]],[11,"from","tower_grpc","",0,[[["error"]],["self"]]],[11,"from","tower_grpc::metadata","",50,[[["metadatakey"]],["metadatakey"]]],[11,"from","tower_grpc::codegen::server::bytes","",67,[[["metadatakey"]],["bytes"]]],[11,"from","tower_grpc::metadata","",52,[[["metadatakey"]],["metadatavalue",["ascii"]]]],[11,"from","","",52,[[["u16"]],["metadatavalue",["ascii"]]]],[11,"from","","",52,[[["i16"]],["metadatavalue",["ascii"]]]],[11,"from","","",52,[[["u32"]],["metadatavalue",["ascii"]]]],[11,"from","","",52,[[["i32"]],["metadatavalue",["ascii"]]]],[11,"from","","",52,[[["u64"]],["metadatavalue",["ascii"]]]],[11,"from","","",52,[[["i64"]],["metadatavalue",["ascii"]]]],[11,"from","","",52,[[["usize"]],["metadatavalue",["ascii"]]]],[11,"from","","",52,[[["isize"]],["metadatavalue",["ascii"]]]],[11,"from","tower_grpc::codegen::server::bytes","",67,[[["metadatavalue"]],["bytes"]]],[11,"from","tower_grpc::metadata","",52,[[["metadatavalue"]],["self"]]],[11,"from","tower_grpc","",21,[[["error"]],["self"]]],[11,"from","tower_grpc::codegen::server::h2","",72,[[["status"]],["self"]]],[11,"as_ref","tower_grpc::metadata","",50,[[["self"]],["str"]]],[11,"as_ref","","",50,N],[11,"as_ref","","",52,N],[11,"clone","tower_grpc::client","",3,[[["self"]],["grpc"]]],[11,"clone","tower_grpc::generic::server","",5,[[["self"]],["grpc"]]],[11,"clone","tower_grpc::generic","",4,[[["self"]],["direction"]]],[11,"clone","tower_grpc::metadata","",48,[[["self"]],["ascii"]]],[11,"clone","","",49,[[["self"]],["binary"]]],[11,"clone","","",50,[[["self"]],["metadatakey"]]],[11,"clone","","",52,[[["self"]],["metadatavalue"]]],[11,"clone","","",54,[[["self"]],["metadatamap"]]],[11,"clone","tower_grpc","",21,[[["self"]],["status"]]],[11,"clone","","",1,[[["self"]],["code"]]],[11,"clone","tower_grpc::server","",28,[[["self"]],["grpc"]]],[11,"into_iter","tower_grpc::metadata","",62,[[["self"]],["valueitermut"]]],[11,"into_iter","","",60,[[["self"]],["valueiter"]]],[11,"drop","tower_grpc::generic","",44,[[["self"]]]],[11,"fmt","tower_grpc","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_grpc::metadata::errors","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_grpc::metadata","",50,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_grpc::metadata::errors","",51,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_grpc::client::unary","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_grpc::client::client_streaming","",39,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_grpc::client::server_streaming","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_grpc::client::streaming","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_grpc::client","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_grpc::generic::server","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_grpc::generic::server::client_streaming","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_grpc::generic::server::server_streaming","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_grpc::generic::server::streaming","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_grpc::generic::server::unary","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_grpc::generic","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_grpc","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_grpc::metadata::errors","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_grpc::metadata","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_grpc::metadata::errors","",47,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_grpc::metadata","",50,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_grpc::metadata::errors","",53,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_grpc::metadata","",52,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_grpc","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_grpc::server::client_streaming","",63,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_grpc::server::server_streaming","",64,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_grpc::server::streaming","",65,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_grpc::server::unary","",66,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_grpc::server","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_grpc","",37,[[["self"],["formatter"]],["result"]]],[11,"hash","tower_grpc::metadata","",48,N],[11,"hash","","",49,N],[11,"hash","","",50,N],[11,"hash","","",52,N],[11,"from_str","","",50,[[["str"]],["result",["invalidmetadatakey"]]]],[11,"from_str","","",52,[[["str"]],["result",["metadatavalue"]]]],[11,"borrow","","",50,[[["self"]],["str"]]],[11,"cause","tower_grpc","",0,[[["self"]],["option",["error"]]]],[11,"description","tower_grpc::metadata::errors","",46,[[["self"]],["str"]]],[11,"description","","",47,[[["self"]],["str"]]],[11,"description","","",51,[[["self"]],["str"]]],[11,"description","","",53,[[["self"]],["str"]]],[11,"remaining","tower_grpc::generic","",44,[[["self"]],["usize"]]],[11,"bytes","","",44,N],[11,"advance","","",44,[[["self"],["usize"]]]],[11,"remaining_mut","","",14,[[["self"]],["usize"]]],[11,"advance_mut","","",14,[[["self"],["usize"]]]],[11,"bytes_mut","","",14,N],[11,"poll","tower_grpc::client::unary","",38,[[["self"]],["poll"]]],[11,"poll","tower_grpc::client::client_streaming","",39,[[["self"]],["poll"]]],[11,"poll","tower_grpc::client::server_streaming","",40,[[["self"]],["poll"]]],[11,"poll","tower_grpc::client::streaming","",41,[[["self"]],["poll"]]],[11,"poll","tower_grpc::generic::server::client_streaming","",6,[[["self"]],["poll"]]],[11,"poll","tower_grpc::generic::server::server_streaming","",7,[[["self"]],["poll"]]],[11,"poll","tower_grpc::generic::server::streaming","",8,[[["self"]],["poll"]]],[11,"poll","tower_grpc::generic::server::unary","",9,[[["self"]],["poll"]]],[11,"poll","tower_grpc::server::client_streaming","",63,[[["self"]],["poll"]]],[11,"poll","tower_grpc::server::server_streaming","",64,[[["self"]],["poll"]]],[11,"poll","tower_grpc::server::streaming","",65,[[["self"]],["poll"]]],[11,"poll","tower_grpc::server::unary","",66,[[["self"]],["poll"]]],[11,"poll","tower_grpc::generic::server::unary","",45,[[["self"]],["poll",["option"]]]],[11,"poll","tower_grpc::generic","",42,[[["self"]],["poll",["option"]]]],[11,"is_end_stream","","",43,[[["self"]],["bool"]]],[11,"poll_data","","",43,[[["self"]],["poll",["option","error"]]]],[11,"poll_trailers","","",43,[[["self"]],["poll",["option","error"]]]],[11,"is_end_stream","tower_grpc","",18,[[["self"]],["bool"]]],[11,"poll_data","","",18,[[["self"]],["poll",["option","error"]]]],[11,"poll_trailers","","",18,[[["self"]],["poll",["option","error"]]]],[11,"is_end_stream","","",37,[[["self"]],["bool"]]],[11,"poll_data","","",37,[[["self"]],["poll",["option","error"]]]],[11,"poll_trailers","","",37,[[["self"]],["poll",["option","error"]]]],[18,"CONTENT_TYPE","tower_grpc::generic","The content-type header for messages using this encoding.",16,N],[11,"is_end_stream","tower_grpc::codegen::server::grpc","Returns `true` when the end of the stream has been reached.",29,[[["self"]],["bool"]]],[11,"from_bytes","tower_grpc::metadata","Converts a slice of bytes to a `MetadataKey`.",50,N],[11,"from_static","","Converts a static string to a `MetadataKey`.",50,[[["str"]],["self"]]],[11,"as_str","","Returns a `str` representation of the metadata key.",50,[[["self"]],["str"]]],[11,"new","tower_grpc::metadata::errors","",51,[[],["invalidmetadatakey"]]],[11,"from_static","tower_grpc::metadata","Convert a static string to a `MetadataValue`.",52,[[["str"]],["self"]]],[11,"try_from_bytes","","Attempt to convert a byte slice to a `MetadataValue`.",52,N],[11,"from_shared","","Attempt to convert a `Bytes` buffer to a `MetadataValue`.",52,[[["bytes"]],["result",["invalidmetadatavaluebytes"]]]],[11,"from_shared_unchecked","","Convert a `Bytes` directly into a `MetadataValue` without validating. For MetadataValue the provided parameter must be base64 encoded without padding bytes at the end.",52,[[["bytes"]],["self"]]],[11,"is_empty","","Returns true if the `MetadataValue` has a length of zero bytes.",52,[[["self"]],["bool"]]],[11,"to_bytes","","Converts a `MetadataValue` to a Bytes buffer. This method cannot fail for Ascii values. For Ascii values, `as_bytes` is more convenient to use.",52,[[["self"]],["result",["bytes","invalidmetadatavaluebytes"]]]],[11,"set_sensitive","","Mark that the metadata value represents sensitive information.",52,[[["self"],["bool"]]]],[11,"is_sensitive","","Returns `true` if the value represents sensitive data.",52,[[["self"]],["bool"]]],[11,"as_encoded_bytes","","Converts a `MetadataValue` to a byte slice. For Binary values, the return value is base64 encoded.",52,N],[11,"from_str","","Attempt to convert a string to a `MetadataValue<Ascii>`.",52,[[["str"]],["result",["invalidmetadatavalue"]]]],[11,"from_key","","Converts a MetadataKey into a MetadataValue.",52,[[["metadatakey"]],["self"]]],[11,"len","","Returns the length of `self`, in bytes.",52,[[["self"]],["usize"]]],[11,"to_str","","Yields a `&str` slice if the `MetadataValue` only contains visible ASCII chars.",52,[[["self"]],["result",["str","tostrerror"]]]],[11,"as_bytes","","Converts a `MetadataValue` to a byte slice. For Binary values, use `to_bytes`.",52,N],[11,"from_bytes","","Convert a byte slice to a `MetadataValue<Binary>`.",52,N],[11,"new","","Create an empty `MetadataMap`.",54,[[],["self"]]],[11,"from_headers","","Convert an HTTP HeaderMap to a MetadataMap",54,[[["headermap"]],["self"]]],[11,"into_headers","","Convert a MetadataMap into a HTTP HeaderMap",54,[[["self"]],["headermap"]]],[11,"with_capacity","","Create an empty `MetadataMap` with the specified capacity.",54,[[["usize"]],["metadatamap"]]],[11,"len","","Returns the number of metadata entries (ascii and binary) stored in the map.",54,[[["self"]],["usize"]]],[11,"keys_len","","Returns the number of keys (ascii and binary) stored in the map.",54,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the map contains no elements.",54,[[["self"]],["bool"]]],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory for reuse.",54,[[["self"]]]],[11,"capacity","","Returns the number of custom metadata entries the map can hold without reallocating.",54,[[["self"]],["usize"]]],[11,"reserve","","Reserves capacity for at least `additional` more custom metadata to be inserted into the `MetadataMap`.",54,[[["self"],["usize"]]]],[11,"get","","Returns a reference to the value associated with the key. This method is for ascii metadata entries (those whose names don't end with \"-bin\"). For binary entries, use get_bin.",54,[[["self"],["k"]],["option",["metadatavalue"]]]],[11,"get_bin","","Like get, but for Binary keys (for example \"trace-proto-bin\").",54,[[["self"],["k"]],["option",["metadatavalue"]]]],[11,"get_mut","","Returns a mutable reference to the value associated with the key. This method is for ascii metadata entries (those whose names don't end with \"-bin\"). For binary entries, use get_mut_bin.",54,[[["self"],["k"]],["option",["metadatavalue"]]]],[11,"get_bin_mut","","Like get_mut, but for Binary keys (for example \"trace-proto-bin\").",54,[[["self"],["k"]],["option",["metadatavalue"]]]],[11,"get_all","","Returns a view of all values associated with a key. This method is for ascii metadata entries (those whose names don't end with \"-bin\"). For binary entries, use get_all_bin.",54,[[["self"],["k"]],["getall",["ascii"]]]],[11,"get_all_bin","","Like get_all, but for Binary keys (for example \"trace-proto-bin\").",54,[[["self"],["k"]],["getall",["binary"]]]],[11,"contains_key","","Returns true if the map contains a value for the specified key. This method works for both ascii and binary entries.",54,[[["self"],["k"]],["bool"]]],[11,"iter","","An iterator visiting all key-value pairs (both ascii and binary).",54,[[["self"]],["iter"]]],[11,"iter_mut","","An iterator visiting all key-value pairs, with mutable value references.",54,[[["self"]],["itermut"]]],[11,"keys","","An iterator visiting all keys.",54,[[["self"]],["keys"]]],[11,"values","","An iterator visiting all values (both ascii and binary).",54,[[["self"]],["values"]]],[11,"values_mut","","An iterator visiting all values mutably.",54,[[["self"]],["valuesmut"]]],[11,"entry","","Gets the given ascii key's corresponding entry in the map for in-place manipulation. For binary keys, use `entry_bin`.",54,[[["self"],["k"]],["result",["entry","invalidmetadatakey"]]]],[11,"entry_bin","","Gets the given Binary key's corresponding entry in the map for in-place manipulation.",54,[[["self"],["k"]],["result",["entry","invalidmetadatakey"]]]],[11,"insert","","Inserts an ascii key-value pair into the map. To insert a binary entry, use `insert_bin`.",54,[[["self"],["k"],["metadatavalue",["ascii"]]],["option",["metadatavalue"]]]],[11,"insert_bin","","Like insert, but for Binary keys (for example \"trace-proto-bin\").",54,[[["self"],["k"],["metadatavalue",["binary"]]],["option",["metadatavalue"]]]],[11,"append","","Inserts an ascii key-value pair into the map. To insert a binary entry, use `append_bin`.",54,[[["self"],["k"],["metadatavalue",["ascii"]]],["bool"]]],[11,"append_bin","","Like append, but for binary keys (for example \"trace-proto-bin\").",54,[[["self"],["k"],["metadatavalue",["binary"]]],["bool"]]],[11,"remove","","Removes an ascii key from the map, returning the value associated with the key. To remove a binary key, use `remove_bin`.",54,[[["self"],["k"]],["option",["metadatavalue"]]]],[11,"remove_bin","","Like remove, but for Binary keys (for example \"trace-proto-bin\").",54,[[["self"],["k"]],["option",["metadatavalue"]]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty.",27,[[["self"],["metadatavalue"]],["metadatavalue"]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty.",27,[[["self"],["f"]],["metadatavalue"]]],[11,"key","","Returns a reference to the entry's key",27,[[["self"]],["metadatakey"]]],[11,"key","","Returns a reference to the entry's key",61,[[["self"]],["metadatakey"]]],[11,"into_key","","Take ownership of the key",61,[[["self"]],["metadatakey"]]],[11,"insert","","Insert the value into the entry.",61,[[["self"],["metadatavalue"]],["metadatavalue"]]],[11,"insert_entry","","Insert the value into the entry.",61,[[["self"],["metadatavalue"]],["occupiedentry",["ascii"]]]],[11,"key","","Returns a reference to the entry's key.",62,[[["self"]],["metadatakey"]]],[11,"get","","Get a reference to the first value in the entry.",62,[[["self"]],["metadatavalue"]]],[11,"get_mut","","Get a mutable reference to the first value in the entry.",62,[[["self"]],["metadatavalue"]]],[11,"into_mut","","Converts the `OccupiedEntry` into a mutable reference to the first value.",62,[[["self"]],["metadatavalue"]]],[11,"insert","","Sets the value of the entry.",62,[[["self"],["metadatavalue"]],["metadatavalue"]]],[11,"insert_mult","","Sets the value of the entry.",62,[[["self"],["metadatavalue"]],["valuedrain"]]],[11,"append","","Insert the value into the entry.",62,[[["self"],["metadatavalue"]]]],[11,"remove","","Remove the entry from the map.",62,[[["self"]],["metadatavalue"]]],[11,"remove_entry","","Remove the entry from the map.",62,N],[11,"remove_entry_mult","","Remove the entry from the map.",62,N],[11,"iter","","Returns an iterator visiting all values associated with the entry.",62,[[["self"]],["valueiter"]]],[11,"iter_mut","","Returns an iterator mutably visiting all values associated with the entry.",62,[[["self"]],["valueitermut"]]],[11,"iter","","Returns an iterator visiting all values associated with the entry.",60,[[["self"]],["valueiter"]]],[11,"with_capacity","tower_grpc::codegen::server::bytes","Creates a new `Bytes` with the specified capacity.",67,[[["usize"]],["bytes"]]],[11,"new","","Creates a new empty `Bytes`.",67,[[],["bytes"]]],[11,"from_static","","Creates a new `Bytes` from a static slice.",67,N],[11,"len","","Returns the number of bytes contained in this `Bytes`.",67,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the `Bytes` has a length of 0.",67,[[["self"]],["bool"]]],[11,"slice","","Returns a slice of self for the index range `[begin..end)`.",67,[[["self"],["usize"],["usize"]],["bytes"]]],[11,"slice_from","","Returns a slice of self for the index range `[begin..self.len())`.",67,[[["self"],["usize"]],["bytes"]]],[11,"slice_to","","Returns a slice of self for the index range `[0..end)`.",67,[[["self"],["usize"]],["bytes"]]],[11,"slice_ref","","Returns a slice of self that is equivalent to the given `subset`.",67,N],[11,"split_off","","Splits the bytes into two at the given index.",67,[[["self"],["usize"]],["bytes"]]],[11,"split_to","","Splits the bytes into two at the given index.",67,[[["self"],["usize"]],["bytes"]]],[11,"truncate","","Shortens the buffer, keeping the first `len` bytes and dropping the rest.",67,N],[11,"advance","","Shortens the buffer, dropping the first `cnt` bytes and keeping the rest.",67,N],[11,"clear","","Clears the buffer, removing all data.",67,N],[11,"try_mut","","Attempts to convert into a `BytesMut` handle.",67,[[["self"]],["result",["bytesmut","bytes"]]]],[11,"extend_from_slice","","Appends given bytes to this object.",67,N],[11,"map","tower_grpc::codegen::server::futures","Change the success value of this `Async` with the closure provided",32,[[["self"],["f"]],["async"]]],[11,"is_ready","","Returns whether this is `Async::Ready`",32,[[["self"]],["bool"]]],[11,"is_not_ready","","Returns whether this is `Async::NotReady`",32,[[["self"]],["bool"]]],[11,"builder","tower_grpc::codegen::server::http","Creates a new builder-style object to manufacture a `Request`",69,[[],["builder"]]],[11,"get","","Creates a new `Builder` initialized with a GET method and the given URI.",69,[[["t"]],["builder"]]],[11,"put","","Creates a new `Builder` initialized with a PUT method and the given URI.",69,[[["t"]],["builder"]]],[11,"post","","Creates a new `Builder` initialized with a POST method and the given URI.",69,[[["t"]],["builder"]]],[11,"delete","","Creates a new `Builder` initialized with a DELETE method and the given URI.",69,[[["t"]],["builder"]]],[11,"options","","Creates a new `Builder` initialized with an OPTIONS method and the given URI.",69,[[["t"]],["builder"]]],[11,"head","","Creates a new `Builder` initialized with a HEAD method and the given URI.",69,[[["t"]],["builder"]]],[11,"connect","","Creates a new `Builder` initialized with a CONNECT method and the given URI.",69,[[["t"]],["builder"]]],[11,"patch","","Creates a new `Builder` initialized with a PATCH method and the given URI.",69,[[["t"]],["builder"]]],[11,"trace","","Creates a new `Builder` initialized with a TRACE method and the given URI.",69,[[["t"]],["builder"]]],[11,"new","","Creates a new blank `Request` with the body",69,[[["t"]],["request"]]],[11,"from_parts","","Creates a new `Request` with the given components parts and body.",69,[[["parts"],["t"]],["request"]]],[11,"method","","Returns a reference to the associated HTTP method.",69,[[["self"]],["method"]]],[11,"method_mut","","Returns a mutable reference to the associated HTTP method.",69,[[["self"]],["method"]]],[11,"uri","","Returns a reference to the associated URI.",69,[[["self"]],["uri"]]],[11,"uri_mut","","Returns a mutable reference to the associated URI.",69,[[["self"]],["uri"]]],[11,"version","","Returns the associated version.",69,[[["self"]],["version"]]],[11,"version_mut","","Returns a mutable reference to the associated version.",69,[[["self"]],["version"]]],[11,"headers","","Returns a reference to the associated header field map.",69,[[["self"]],["headermap"]]],[11,"headers_mut","","Returns a mutable reference to the associated header field map.",69,[[["self"]],["headermap"]]],[11,"extensions","","Returns a reference to the associated extensions.",69,[[["self"]],["extensions"]]],[11,"extensions_mut","","Returns a mutable reference to the associated extensions.",69,[[["self"]],["extensions"]]],[11,"body","","Returns a reference to the associated HTTP body.",69,[[["self"]],["t"]]],[11,"body_mut","","Returns a mutable reference to the associated HTTP body.",69,[[["self"]],["t"]]],[11,"into_body","","Consumes the request, returning just the body.",69,[[["self"]],["t"]]],[11,"into_parts","","Consumes the request returning the head and body parts.",69,N],[11,"map","","Consumes the request returning a new request with body mapped to the return type of the passed in function.",69,[[["self"],["f"]],["request"]]],[11,"builder","","Creates a new builder-style object to manufacture a `Response`",70,[[],["builder"]]],[11,"new","","Creates a new blank `Response` with the body",70,[[["t"]],["response"]]],[11,"from_parts","","Creates a new `Response` with the given head and body",70,[[["parts"],["t"]],["response"]]],[11,"status","","Returns the `StatusCode`.",70,[[["self"]],["statuscode"]]],[11,"status_mut","","Returns a mutable reference to the associated `StatusCode`.",70,[[["self"]],["statuscode"]]],[11,"version","","Returns a reference to the associated version.",70,[[["self"]],["version"]]],[11,"version_mut","","Returns a mutable reference to the associated version.",70,[[["self"]],["version"]]],[11,"headers","","Returns a reference to the associated header field map.",70,[[["self"]],["headermap"]]],[11,"headers_mut","","Returns a mutable reference to the associated header field map.",70,[[["self"]],["headermap"]]],[11,"extensions","","Returns a reference to the associated extensions.",70,[[["self"]],["extensions"]]],[11,"extensions_mut","","Returns a mutable reference to the associated extensions.",70,[[["self"]],["extensions"]]],[11,"body","","Returns a reference to the associated HTTP body.",70,[[["self"]],["t"]]],[11,"body_mut","","Returns a mutable reference to the associated HTTP body.",70,[[["self"]],["t"]]],[11,"into_body","","Consumes the response, returning just the body.",70,[[["self"]],["t"]]],[11,"into_parts","","Consumes the response returning the head and body parts.",70,N],[11,"map","","Consumes the response returning a new response with body mapped to the return type of the passed in function.",70,[[["self"],["f"]],["response"]]],[11,"new","","Create an empty `HeaderMap`.",71,[[],["headermap",["headervalue"]]]],[11,"with_capacity","","Create an empty `HeaderMap` with the specified capacity.",71,[[["usize"]],["headermap"]]],[11,"len","","Returns the number of headers stored in the map.",71,[[["self"]],["usize"]]],[11,"keys_len","","Returns the number of keys stored in the map.",71,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the map contains no elements.",71,[[["self"]],["bool"]]],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory for reuse.",71,N],[11,"capacity","","Returns the number of headers the map can hold without reallocating.",71,[[["self"]],["usize"]]],[11,"reserve","","Reserves capacity for at least `additional` more headers to be inserted into the `HeaderMap`.",71,N],[11,"get","","Returns a reference to the value associated with the key.",71,[[["self"],["k"]],["option"]]],[11,"get_mut","","Returns a mutable reference to the value associated with the key.",71,[[["self"],["k"]],["option"]]],[11,"get_all","","Returns a view of all values associated with a key.",71,[[["self"],["k"]],["getall"]]],[11,"contains_key","","Returns true if the map contains a value for the specified key.",71,[[["self"],["k"]],["bool"]]],[11,"iter","","An iterator visiting all key-value pairs.",71,[[["self"]],["iter"]]],[11,"iter_mut","","An iterator visiting all key-value pairs, with mutable value references.",71,[[["self"]],["itermut"]]],[11,"keys","","An iterator visiting all keys.",71,[[["self"]],["keys"]]],[11,"values","","An iterator visiting all values.",71,[[["self"]],["values"]]],[11,"values_mut","","An iterator visiting all values mutably.",71,[[["self"]],["valuesmut"]]],[11,"drain","","Clears the map, returning all entries as an iterator.",71,[[["self"]],["drain"]]],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",71,[[["self"],["k"]],["result",["entry","invalidheadername"]]]],[11,"insert","","Inserts a key-value pair into the map.",71,[[["self"],["k"],["t"]],["option"]]],[11,"append","","Inserts a key-value pair into the map.",71,[[["self"],["k"],["t"]],["bool"]]],[11,"remove","","Removes a key from the map, returning the value associated with the key.",71,[[["self"],["k"]],["option"]]],[11,"reason","tower_grpc::codegen::server::h2","If the error was caused by the remote peer, the error reason.",72,[[["self"]],["option",["reason"]]]],[11,"is_io","","Returns the true if the error is an io::Error",72,[[["self"]],["bool"]]],[11,"get_io","","Returns the error if the error is an io::Error",72,[[["self"]],["option",["error"]]]],[11,"into_io","","Returns the error if the error is an io::Error",72,[[["self"]],["option",["error"]]]],[11,"stream_id","tower_grpc::codegen::server::tower_h2","Returns the stream ID of the received stream, or `None` if this body does not correspond to a stream.",73,[[["self"]],["option",["streamid"]]]],[11,"builder","tower_grpc::codegen::client::http","Creates a new builder-style object to manufacture a `Uri`.",74,[[],["builder"]]],[11,"from_parts","","Attempt to convert a `Uri` from `Parts`",74,[[["parts"]],["result",["uri","invaliduriparts"]]]],[11,"from_shared","","Attempt to convert a `Uri` from `Bytes`",74,[[["bytes"]],["result",["uri","invaliduribytes"]]]],[11,"from_static","","Convert a `Uri` from a static string.",74,[[["str"]],["uri"]]],[11,"into_parts","","Convert a `Uri` into `Parts`.",74,[[["self"]],["parts"]]],[11,"path_and_query","","Returns the path & query components of the Uri",74,[[["self"]],["option",["pathandquery"]]]],[11,"path","","Get the path of this `Uri`.",74,[[["self"]],["str"]]],[11,"scheme_part","","Get the scheme of this `Uri`.",74,[[["self"]],["option",["scheme"]]]],[11,"scheme_str","","Get the scheme of this `Uri` as a `&str`.",74,[[["self"]],["option",["str"]]]],[11,"authority_part","","Get the authority of this `Uri`.",74,[[["self"]],["option",["authority"]]]],[11,"host","","Get the host of this `Uri`.",74,[[["self"]],["option",["str"]]]],[11,"port_part","","Get the port part of this `Uri`.",74,[[["self"]],["option",["port"]]]],[11,"port_u16","","Get the port of this `Uri` as a `u16`.",74,[[["self"]],["option",["u16"]]]],[11,"query","","Get the query string of this `Uri`, starting after the `?`.",74,[[["self"]],["option",["str"]]]],[11,"from_shared","","Attempt to convert a `PathAndQuery` from `Bytes`.",75,[[["bytes"]],["result",["pathandquery","invaliduribytes"]]]],[11,"from_static","","Convert a `PathAndQuery` from a static string.",75,[[["str"]],["pathandquery"]]],[11,"path","","Returns the path component",75,[[["self"]],["str"]]],[11,"query","","Returns the query string component",75,[[["self"]],["option",["str"]]]],[11,"as_str","","Returns the path and query as a string component.",75,[[["self"]],["str"]]],[11,"into_bytes","","Converts this `PathAndQuery` back to a sequence of bytes",75,[[["self"]],["bytes"]]]],"paths":[[4,"Error"],[4,"Code"],[8,"Encodable"],[3,"Grpc"],[4,"Direction"],[3,"Grpc"],[3,"ResponseFuture"],[3,"ResponseFuture"],[3,"ResponseFuture"],[3,"ResponseFuture"],[8,"StreamingService"],[8,"UnaryService"],[8,"ClientStreamingService"],[8,"ServerStreamingService"],[3,"EncodeBuf"],[8,"Codec"],[8,"Encoder"],[8,"Decoder"],[3,"BoxBody"],[3,"Request"],[3,"Response"],[3,"Status"],[4,"KeyRef"],[4,"KeyAndValueRef"],[4,"KeyAndMutValueRef"],[4,"ValueRef"],[4,"ValueRefMut"],[4,"Entry"],[3,"Grpc"],[8,"Body"],[8,"Future"],[8,"Stream"],[4,"Async"],[8,"Service"],[8,"MakeService"],[8,"Body"],[8,"HttpService"],[3,"Encode"],[3,"ResponseFuture"],[3,"ResponseFuture"],[3,"ResponseFuture"],[3,"ResponseFuture"],[3,"Streaming"],[3,"Encode"],[3,"DecodeBuf"],[3,"Once"],[3,"InvalidMetadataValue"],[3,"InvalidMetadataValueBytes"],[4,"Ascii"],[4,"Binary"],[3,"MetadataKey"],[3,"InvalidMetadataKey"],[3,"MetadataValue"],[3,"ToStrError"],[3,"MetadataMap"],[3,"Iter"],[3,"ValueDrain"],[3,"Keys"],[3,"Values"],[3,"ValueIter"],[3,"GetAll"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"ResponseFuture"],[3,"ResponseFuture"],[3,"ResponseFuture"],[3,"ResponseFuture"],[3,"Bytes"],[3,"FutureResult"],[3,"Request"],[3,"Response"],[3,"HeaderMap"],[3,"Error"],[3,"RecvBody"],[3,"Uri"],[3,"PathAndQuery"]]};
initSearch(searchIndex);
